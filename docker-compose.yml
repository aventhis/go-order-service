version: '3.9'

services:
  db:
    image: postgres:latest
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,INTERNAL://0.0.0.0:29092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    depends_on:
      - zookeeper

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "${APP_PORT:-8081}:8081"
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSL_MODE=${DB_SSL_MODE}
      - KAFKA_BROKERS=kafka:29092
      - APP_ENV=${APP_ENV}
    restart: unless-stopped

  producer:
    build:
      context: .
      dockerfile: Dockerfile.producer
    container_name: order-producer
    depends_on:
      kafka:
        condition: service_started
    environment:
      - KAFKA_BROKERS=kafka:29092
      - KAFKA_TOPIC=orders
      - PRODUCER_INTERVAL=5
    restart: unless-stopped

volumes:
  postgres_data: